
/**
 * Represents and maintains a Tic-Tac-Toe board. Accepts move input in various 
 * forms and throws exceptions for invalid or illegal entries. Places
 * valid moves and determines if the game has been won. Displays the board
 * contents.
 * This code is available for public use. Please give credit where it is due.
 *
 * @Yahvin Gali
 * @4/12/2021
 */
 
public class TicTacToeBoard {
    private final char[][] grid = new char[3][3];
    public static final char SPACE = ' ';
    
    /**
     * Fills the grid with space characters.
     */
    public TicTacToeBoard() {
        clearGrid();
    }
    
    /**
     * Validates a human player's String input for a move. 
     * @param input A string that is expected to be a two-character keyboard
     * entry from the user representing a row and a column.
     * @param mark The mark (X or O) the calling Player wishes to place on the
     * board.
     * @return <code>true</code> if the move resulted in a winning game, 
     * <code>false</code> otherwise.
     * @throws InvalidInputException if the input is not two characters 
     * long and does not contain a valid letter for the first character 
     * and a valid number for the second character, both within the range 
     * of the board.
     * @throws IllegalMoveException if the move attempts to place a mark 
     * on a space that is already occupied.
     */
    public boolean move(String input, char mark) throws InvalidInputException,
            IllegalMoveException {
        
        if (input == null){
            throw new NullInputException();
        }

        if (input.length() != 2){
            throw new InvalidInputException();
        }
       
        if((!(input.substring(0,1).equalsIgnoreCase("A")) && 
        !(input.substring(0,1).equalsIgnoreCase("B")) && 
        !(input.substring(0,1).equalsIgnoreCase("C"))) || 
        (!(input.substring(1).equalsIgnoreCase("1")) && 
        !(input.substring(1).equalsIgnoreCase("2")) && 
        !(input.substring(1).equalsIgnoreCase("3")))){
            throw new InvalidInputException();
        }
        
        /** 
         * Convert the characters in the input to variables of
         * type int that correspond to rows and columns in the grid. 
         * EX: "A3", is row = 0 and col = 2.
         */
        int row = 0;
        int col = 0;
        
        if (input.substring(0,1).equalsIgnoreCase("A")){
            row = 0;
        }
        if (input.substring(0,1).equalsIgnoreCase("B")){
            row = 1;
        }
        if (input.substring(0,1).equalsIgnoreCase("C")){
            row = 2;
        }
        
        if (input.substring(1).equalsIgnoreCase("1")){
            col = 0;
        }
        if (input.substring(1).equalsIgnoreCase("2")){
            col = 1;
        }
        if (input.substring(1).equalsIgnoreCase("3")){
            col = 2;
        }
        return move(row, col, mark);
    }
    
    /**
     * Validates and processes row and column int values for a move. 
     * @param row Value representing the row.
     * @param col Value representing the column.
     * @param mark The mark (X or O) the calling Player wishes to place on the
     * board.
     * @return <code>true</code> if the move resulted in a winning game, 
     * <code>false</code> otherwise
     * @throws IllegalMoveException if the move attempts to place a
     * mark on a space that is already occupied.
     */
    public boolean move(int row, int col, char mark) 
            throws IllegalMoveException {
        if (grid[row][col] != SPACE) throw new IllegalMoveException();
        else grid[row][col] = mark;
        
        if (isWin(mark)==true || isTie()==true) return true;
        else return false;
    }
    
    /**
     * Returns the character at a specified grid location.
     * @param row Value representing the row.
     * @param col Value representing the column.
     * @return Character at grid location specified by row and column.
     */
    public char getSpace(int row, int col) {
        return grid[row][col];
    }
    
    // The isWin() method records if a game has been won here so isTie()
    // can check the result without running isWin() again.
    private boolean gameHasBeenWon = false;
    
    /**
     * Determines if the board has been won with a specified mark.
     * @param mark A mark to search for (X or O).
     * @return <code>true</code> if the board has been won by the specified 
     * mark.
     */
    boolean isWin(char mark) {
        // If the game has already been recorded as won, return true.
        if (gameHasBeenWon) return true;
        /**
         * loop through th ecolumns and diagonals, checking each character in every column and
         * diagonal to see if there are three marks in a line. If any winning line is found:
         *   1. Set gameHasBeenWon to true.
         *   2. Return the value of gameHasBeenWon. 
         */
        // Check for horizontal wins.
        for (int row = 0; row < 3; row++) {
            boolean win = true;
            for (int col = 0; col < 3; col++) {
                if (grid[row][col] != mark) win = false;
            }
            if (win) {
                gameHasBeenWon = true;
                return gameHasBeenWon;
            }
        }
        
        // Check for Vertical wins.
        for (int col = 0; col < 3; col++) {
            boolean win = true;
            for (int row = 0; row < 3; row++) {
                if (grid[row][col] != mark) win = false;
            }
            if (win) {
                gameHasBeenWon = true;
                return gameHasBeenWon;
            }
        }

        boolean win = true;
        for (int i = 0; i < 3; i++) {
            if (grid[i][i] != mark) win = false;
        }
        if (win) {
            gameHasBeenWon = true;
            return gameHasBeenWon;
        }
        
        win = true;
        for (int i = 0; i < 3; i++) {
            if (grid[i][2-i] != mark) win = false;
        }
        if (win) {
            gameHasBeenWon = true;
            return gameHasBeenWon;
        }
        
        // Return false if not returned true anywhere.
        return false;
    }
    
    /**
     * Determines if the game has resulted in a tie.
     * @return <code>true</code> if the game is a tie.
     */
    boolean isTie() {
        // If game has already been recorded as won, then it cannot be a tie.
        if (gameHasBeenWon) return false;
        
        // If there are any spaces on the board, return false, because it is
        // not a tie.
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 3; col++) {
                if (grid[row][col] == SPACE) return false;
            }
        }
        
        // If the game was not won, but all the spaces are full, it is a tie.
        return true;
    }
    
    final String SPACER = "   ";
    
    /**
     * Displays the board.
     */
    public void display() {
        final String CROSSBAR = SPACER + "-----------";
        System.out.println("    1   2   3");
        for (int row = 0; row < 2; row++) {
            printRow(row);
            System.out.println(CROSSBAR);
        }
        printRow(2);
    }

    /**
     * Utility method called by display.
     * @param row The row to be displayed.
     */
    private void printRow(int row) {
        System.out.print((char)('A' + row) + SPACER + grid[row][0]);
        for (int col = 1; col < 3; col++) {
            System.out.print(" | " + grid[row][col]);
        }
        System.out.println();
    }
    
    /**
     * Fills the grid with SPACE characters.
     */
    private void clearGrid() {
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 3; col++) {
                grid[row][col] = SPACE;
            }
        }
    }
}
